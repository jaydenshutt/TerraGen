# {{ project | title }} - {{ cloud | upper }} Terraform Project# {{ project }} - Terraform starter



This directory contains Terraform code to provision a foundational network setup in {{ cloud | upper }}, generated by TerraGen.This Terraform configuration was generated by Jayden Shutt's TerraGen. It creates a VPC with public and private subnets, an Internet Gateway, and optional NAT gateway.



## OverviewQuick start



This configuration will create the following resources:1. Install Terraform (1.0+)

2. (Optional) Create the S3 bucket specified for the backend: `{{ project }}-tfstate` in region `{{ region }}`

- A **Virtual Private Cloud (VPC)** to provide an isolated network environment.3. Initialize:

- **Public and private subnets** across {{ az_count }} availability zones.

- An **Internet Gateway** for public subnet outbound traffic.   terraform init

- **NAT Gateways** to allow private subnets to access the internet without being publicly exposed.

- Associated **route tables** to control traffic flow.4. Review plan:



## How to Use   terraform plan -out plan.tf



1.  **Initialize Terraform**:5. Apply:

    ```sh

    terraform init   terraform apply "plan.tf"

    ```

Notes and learning tips

2.  **Review the Plan**:- The generated security group allows SSH from anywhere â€” for learning convenience. Lock this down before production.

    Check the `variables.tf` file to see the configurable options. You can create a `terraform.tfvars` file to override the defaults.- To use a remote S3 backend, ensure the S3 bucket exists and the IAM identity running Terraform has access to it.

    ```sh - If billing alarms were enabled, an SNS topic and CloudWatch billing alarm were created. Billing metrics are available in `us-east-1` only; ensure the configured region supports billing metrics.

    terraform plan - If security notifications were enabled, basic GuardDuty was enabled and findings are forwarded to the alerts SNS topic. You must confirm the email subscription to receive notifications.

    ``` - The generator supports severity mapping for billing alarms: low/medium/high thresholds. Each severity has its own SNS topic so teams can subscribe at the severity they care about.

 - You can supply multiple alert endpoints (comma-separated emails); each will be subscribed to all severity topics by default.

3.  **Apply the Configuration**:{% if alert_endpoints %}

    ```shAlert endpoints configured for this deployment:

    terraform apply

    ```{% for ep in alert_endpoints %}- {{ ep }}

{% endfor %}

## Remote State{% endif %}


A backend configuration for remote state management is included in `backend.tf`. Before you can use it, you must manually create the required resources:

-   **AWS**: An S3 bucket and a DynamoDB table.
-   **GCP**: A Google Cloud Storage bucket.
-   **Azure**: A Storage Account and a container.

Update the `backend.tf` file with the names of the resources you created, then run `terraform init`.
