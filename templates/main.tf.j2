# Generated by TerraGen// Generated by Jayden Shutt's TerraGen

terraform {terraform {

  required_version = ">= 1.0"  required_version = ">= 1.0"

  required_providers {  required_providers {

{% if cloud == 'aws' %}    aws = { source = "hashicorp/aws" version = "~> 5.0" }

    aws = { source = "hashicorp/aws", version = "~> 5.0" }  }

{% elif cloud == 'gcp' %}}

    google = { source = "hashicorp/google" }

{% elif cloud == 'azure' %}provider "aws" {

    azurerm = { source = "hashicorp/azurerm", version = "~> 3.0" }  region = "{{ region }}"

{% endif %}}

  }

}data "aws_availability_zones" "all" {}



provider "{{ cloud }}" {resource "aws_vpc" "main" {

{% if cloud == 'aws' %}  cidr_block = "{{ vpc_cidr }}"

  region = var.region  tags = merge({ Name = "{{ project }}-vpc" }, {{ tags | tojson }})

{% elif cloud == 'gcp' %}}

  project = var.project

  region  = var.region{% if modules %}

{% elif cloud == 'azure' %}module "vpc" {

  features {}  source = "./modules/vpc"

{% endif %}  project = var.project

}  region = var.region

  vpc_cidr = "{{ vpc_cidr }}"

# --- Network ---  public_subnets = {{ public_subnets | tojson }}

{% if cloud == 'aws' %}  private_subnets = {{ private_subnets | tojson }}

resource "aws_vpc" "main" {  enable_nat = {{ enable_nat | lower }}

  cidr_block = var.vpc_cidr}

  tags       = merge({ Name = "${var.project}-vpc" }, var.tags){% else %}

}// Public and private subnet creation (explicit CIDRs computed by generator)

{% for i in range(az_count) %}

data "aws_availability_zones" "available" {}resource "aws_subnet" "public_{{ i }}" {

  vpc_id            = aws_vpc.main.id

resource "aws_subnet" "public" {  cidr_block        = "{{ public_subnets[i] }}"

  count             = var.az_count  availability_zone = data.aws_availability_zones.all.names[{{ i }}]

  vpc_id            = aws_vpc.main.id  map_public_ip_on_launch = true

  cidr_block        = var.public_subnets[count.index]  tags = { Name = "{{ project }}-public-{{ i }}" }

  availability_zone = data.aws_availability_zones.available.names[count.index]}

  map_public_ip_on_launch = true

  tags              = merge({ Name = "${var.project}-public-${count.index + 1}" }, var.tags)resource "aws_subnet" "private_{{ i }}" {

}  vpc_id            = aws_vpc.main.id

  cidr_block        = "{{ private_subnets[i] }}"

resource "aws_subnet" "private" {  availability_zone = data.aws_availability_zones.all.names[{{ i }}]

  count             = var.az_count  tags = { Name = "{{ project }}-private-{{ i }}" }

  vpc_id            = aws_vpc.main.id}

  cidr_block        = var.private_subnets[count.index]{% endfor %}

  availability_zone = data.aws_availability_zones.available.names[count.index]{% endif %}

  tags              = merge({ Name = "${var.project}-private-${count.index + 1}" }, var.tags)

}resource "aws_internet_gateway" "igw" {

  vpc_id = aws_vpc.main.id

resource "aws_internet_gateway" "main" {  tags = { Name = "{{ project }}-igw" }

  vpc_id = aws_vpc.main.id}

  tags   = merge({ Name = "${var.project}-igw" }, var.tags)

}resource "aws_route_table" "public" {

  vpc_id = aws_vpc.main.id

resource "aws_route_table" "public" {  route {

  vpc_id = aws_vpc.main.id    cidr_block = "0.0.0.0/0"

  route {    gateway_id = aws_internet_gateway.igw.id

    cidr_block = "0.0.0.0/0"  }

    gateway_id = aws_internet_gateway.main.id}

  }

  tags = merge({ Name = "${var.project}-public-rt" }, var.tags){% for i in range(az_count) %}

}resource "aws_route_table_association" "public_assoc_{{ i }}" {

  subnet_id      = aws_subnet.public_{{ i }}.id

resource "aws_route_table_association" "public" {  route_table_id = aws_route_table.public.id

  count          = var.az_count}

  subnet_id      = aws_subnet.public[count.index].id{% endfor %}

  route_table_id = aws_route_table.public.id

}{% if enable_nat %}

// NAT gateway and Elastic IP (basic)

resource "aws_eip" "nat" {resource "aws_eip" "nat" {

  count = var.az_count  vpc = true

  domain = "vpc"}

  tags  = merge({ Name = "${var.project}-nat-eip-${count.index + 1}" }, var.tags)

}resource "aws_nat_gateway" "nat" {

  allocation_id = aws_eip.nat.id

resource "aws_nat_gateway" "main" {  subnet_id     = aws_subnet.public_0.id

  count         = var.az_count}

  allocation_id = aws_eip.nat[count.index].id

  subnet_id     = aws_subnet.public[count.index].idresource "aws_route_table" "private" {

  tags          = merge({ Name = "${var.project}-nat-${count.index + 1}" }, var.tags)  vpc_id = aws_vpc.main.id

}  route {

    cidr_block = "0.0.0.0/0"

resource "aws_route_table" "private" {    nat_gateway_id = aws_nat_gateway.nat.id

  count  = var.az_count  }

  vpc_id = aws_vpc.main.id}

  route {

    cidr_block     = "0.0.0.0/0"{% for i in range(az_count) %}

    nat_gateway_id = aws_nat_gateway.main[count.index].idresource "aws_route_table_association" "private_assoc_{{ i }}" {

  }  subnet_id      = aws_subnet.private_{{ i }}.id

  tags = merge({ Name = "${var.project}-private-rt-${count.index + 1}" }, var.tags)  route_table_id = aws_route_table.private.id

}}

{% endfor %}

resource "aws_route_table_association" "private" {{% endif %}

  count          = var.az_count

  subnet_id      = aws_subnet.private[count.index].id// Basic security group allowing SSH from anywhere (educational - tighten for production)

  route_table_id = aws_route_table.private[count.index].idresource "aws_security_group" "bastion" {

}  name   = "{{ project }}-bastion-sg"

  vpc_id = aws_vpc.main.id

{% elif cloud == 'gcp' %}  ingress {

resource "google_compute_network" "main" {    description = "SSH"

  name                    = "${var.project}-vpc"    from_port   = 22

  auto_create_subnetworks = false    to_port     = 22

}    protocol    = "tcp"

    cidr_blocks = ["0.0.0.0/0"]

resource "google_compute_subnetwork" "public" {  }

  count         = var.az_count  egress {

  name          = "${var.project}-public-${count.index + 1}"    from_port   = 0

  ip_cidr_range = var.public_subnets[count.index]    to_port     = 0

  network       = google_compute_network.main.id    protocol    = "-1"

  region        = var.region    cidr_blocks = ["0.0.0.0/0"]

}  }

}

resource "google_compute_subnetwork" "private" {

  count         = var.az_count{% if enable_billing or enable_security %}

  name          = "${var.project}-private-${count.index + 1}"// Notification topics per severity

  ip_cidr_range = var.private_subnets[count.index]{% for sev in ["low", "medium", "high"] %}

  network       = google_compute_network.main.idresource "aws_sns_topic" "alerts_{{ sev }}" {

  region        = var.region  name = "{{ project }}-alerts-{{ sev }}"

}}

{% endfor %}

resource "google_compute_router" "main" {

  name    = "${var.project}-router"// Subscribe endpoints to all severity topics

  network = google_compute_network.main.id{% for ep in alert_endpoints %}

  region  = var.region  {% set idx = loop.index0 %}

}  {% for sev in ["low", "medium", "high"] %}

resource "aws_sns_topic_subscription" "alerts_{{ sev }}_{{ idx }}" {

resource "google_compute_router_nat" "main" {  topic_arn = aws_sns_topic.alerts_{{ sev }}.arn

  name                               = "${var.project}-nat"  protocol  = "email"

  router                             = google_compute_router.main.name  endpoint  = "{{ ep }}"

  region                             = google_compute_router.main.region}

  source_subnetwork_ip_ranges_to_nat = "LIST_OF_SUBNETWORKS"  {% endfor %}

  nat_ip_allocate_option             = "AUTO_ONLY"{% endfor %}

{% endif %}

  subnetwork {

    name                    = google_compute_subnetwork.private.id{% if enable_billing %}

    source_ip_ranges_to_nat = ["ALL_IP_RANGES"]// Billing alarms for configured severities

  }{% if billing_thresholds.low is defined %}

}resource "aws_cloudwatch_metric_alarm" "billing_low" {

  alarm_name          = "{{ project }}-billing-low"

{% elif cloud == 'azure' %}  comparison_operator = "GreaterThanThreshold"

resource "azurerm_resource_group" "main" {  evaluation_periods  = 1

  name     = "${var.project}-rg"  metric_name         = "EstimatedCharges"

  location = var.region  namespace           = "AWS/Billing"

  tags     = var.tags  statistic           = "Maximum"

}  period              = 21600

  threshold           = {{ billing_thresholds.low }}

resource "azurerm_virtual_network" "main" {  alarm_description   = "Low severity billing threshold"

  name                = "${var.project}-vnet"  alarm_actions       = [aws_sns_topic.alerts_low.arn]

  address_space       = [var.vpc_cidr]  dimensions = {}

  location            = azurerm_resource_group.main.location}

  resource_group_name = azurerm_resource_group.main.name{% endif %}

  tags                = var.tags{% if billing_thresholds.medium is defined %}

}resource "aws_cloudwatch_metric_alarm" "billing_medium" {

  alarm_name          = "{{ project }}-billing-medium"

resource "azurerm_subnet" "public" {  comparison_operator = "GreaterThanThreshold"

  count                = var.az_count  evaluation_periods  = 1

  name                 = "${var.project}-public-${count.index + 1}"  metric_name         = "EstimatedCharges"

  resource_group_name  = azurerm_resource_group.main.name  namespace           = "AWS/Billing"

  virtual_network_name = azurerm_virtual_network.main.name  statistic           = "Maximum"

  address_prefixes     = [var.public_subnets[count.index]]  period              = 21600

}  threshold           = {{ billing_thresholds.medium }}

  alarm_description   = "Medium severity billing threshold"

resource "azurerm_subnet" "private" {  alarm_actions       = [aws_sns_topic.alerts_medium.arn]

  count                = var.az_count  dimensions = {}

  name                 = "${var.project}-private-${count.index + 1}"}

  resource_group_name  = azurerm_resource_group.main.name{% endif %}

  virtual_network_name = azurerm_virtual_network.main.name{% if billing_thresholds.high is defined %}

  address_prefixes     = [var.private_subnets[count.index]]resource "aws_cloudwatch_metric_alarm" "billing_high" {

}  alarm_name          = "{{ project }}-billing-high"

  comparison_operator = "GreaterThanThreshold"

resource "azurerm_public_ip" "nat" {  evaluation_periods  = 1

  count               = var.az_count  metric_name         = "EstimatedCharges"

  name                = "${var.project}-nat-pip-${count.index + 1}"  namespace           = "AWS/Billing"

  location            = azurerm_resource_group.main.location  statistic           = "Maximum"

  resource_group_name = azurerm_resource_group.main.name  period              = 21600

  allocation_method   = "Static"  threshold           = {{ billing_thresholds.high }}

  sku                 = "Standard"  alarm_description   = "High severity billing threshold"

  tags                = var.tags  alarm_actions       = [aws_sns_topic.alerts_high.arn]

}  dimensions = {}

}

resource "azurerm_nat_gateway" "main" {{% endif %}

  count               = var.az_count{% endif %}

  name                = "${var.project}-nat-${count.index + 1}"

  location            = azurerm_resource_group.main.location{% if enable_security %}

  resource_group_name = azurerm_resource_group.main.name// Enable GuardDuty (simple) and send findings to SNS via CloudWatch Events (EventBridge)

  sku_name            = "Standard"resource "aws_guardduty_detector" "gd" {

  public_ip_address_ids = [azurerm_public_ip.nat[count.index].id]  enable = true

  tags                = var.tags}

}

resource "aws_cloudwatch_event_rule" "guardduty_findings" {

resource "azurerm_subnet_nat_gateway_association" "private" {  name        = "{{ project }}-guardduty-findings"

  count          = var.az_count  description = "Forward GuardDuty findings to SNS"

  subnet_id      = azurerm_subnet.private[count.index].id  event_pattern = jsonencode({

  nat_gateway_id = azurerm_nat_gateway.main[count.index].id    source = ["aws.guardduty"]

}  })

{% endif %}}


resource "aws_cloudwatch_event_target" "gd_to_sns" {
  rule      = aws_cloudwatch_event_rule.guardduty_findings.name
  arn       = aws_sns_topic.alerts.arn
}

resource "aws_lambda_permission" "allow_events" {
  statement_id  = "AllowEvents"
  action        = "lambda:InvokeFunction"
  function_name = "dummy"
  principal     = "events.amazonaws.com"
}
{% endif %}
